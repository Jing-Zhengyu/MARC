install.packages("renv")
install.packages("renv")
install.packages("here")
renv::init()
# 保存当前所用的包环境，当然我们才刚刚开始开发，别的包都没有引入
renv::snapshot()
install.packages("rmarkdown")
usethis::use_readme_rmd()
devtools::document()
renv::snapshot()
renv::snapshot()
devtools::document()
devtools::document()
?contamination_condition
install.packages("styler")
install.packages("E:/my_lab/Gene_Screen_Analysis 2019.12.14 -/MARC.zip", repos = NULL, type = "win.binary")
renv::snapshot()
library("MARC")
install.packages("E:/my_lab/Gene_Screen_Analysis 2019.12.14 -/MARC_0.0.0.9000.tar.gz", repos = NULL, type = "source")
install.packages("E:/my_lab/Gene_Screen_Analysis 2019.12.14 -/MARC_0.0.0.9000.tar.gz", repos = NULL, type = "source")
install.packages("E:/my_lab/Gene_Screen_Analysis 2019.12.14 -/MARC_0.0.0.9000.tar.gz", repos = NULL, type = "source")
install.packages("../MARC_0.0.0.9000.tar.gz", repos = NULL, type = "source")
install.packages(ggplot2)
install.packages(magrittr)
install.packages(RColorBrewer)
#install.packages(ggrepel)
#install.packages(gghalves)
install.packages(tidyverse)
install.packages(reshape2)
install.packages(ggsci)
install.packages(xlsx)
install.packages(yyplot)
#install.packages(ggbreak)
install.packages(tidyr)
#install.packages(ggseqlogo)
install.packages(extrafont)
#install.packages(sangerseqR)
install.packages(profvis)
install.packages("ggplot2")
install.packages("magrittr")
#install.packages("RColorBrewer")
#install.packages("ggrepel")
#install.packages("gghalves")
install.packages("tidyverse")
install.packages("reshape2")
install.packages("ggsci")
install.packages("xlsx")
install.packages("yyplot")
#install.packages("ggbreak")
install.packages("tidyr")
#install.packages("ggseqlogo")
install.packages("extrafont")
#install.packages("sangerseqR")
install.packages("profvis")
#在函数加完包所需结构之后
devtools::document()
？data_clean_for_ngs
?data_clean_for_ngs
devtools::build_readme()
devtools::use_readme_rmd()
use_readme_rmd()
usethis::use_readme_rmd()
usethis::use_readme_rmd()
devtools::build_readme()
install.packages("E:/my_lab/Gene_Screen_Analysis 2019.12.14 -/MARC_0.0.0.9000.tar.gz", repos = NULL, type = "source")
library("devtools")
library("tidyverse")
library("fs")
install.packages(tidyverse)
install.packages("tidyverse")
library("tidyverse")
library("tidyverse")
install.packages("tidyverse")
library("tidyverse")
install.packages("tidyverse")
unloadNamespace("tidyverse")
install.packages("tidyverse")
library("tidyverse")
unloadNamespace("ellipsis")
install.packages("ellipsis")
library("tidyverse")
detach("package:devtools", unload = TRUE)
detach("package:fs", unload = TRUE)
detach("package:usethis", unload = TRUE)
detach("package:datasets", unload = TRUE)
detach("package:graphics", unload = TRUE)
detach("package:grDevices", unload = TRUE)
detach("package:methods", unload = TRUE)
detach("package:stats", unload = TRUE)
library("tidyverse")
library(ellipsis)
renv::snapshot(confirm = FALSE)
library("tidyverse")
library("tidyverse")
install.packages("vctrs")
renv::snapshot(confirm = FALSE)
library("tidyverse")
library("tidyverse")
library("devtools")
packageVersion("devtools")
install.packages("devtools")
library("devtools")
packageVersion("devtools")
library(devtools)
library(devtools)
library(MARC)
a <- factor(c("character", "hits", "your", "eyeballs"))
b <- factor(c("but", "integer", "where it", "counts"))
a
b
c(a,b)
use_r("contamination_condition")
?use_r
load_all()
check()
use_mit_license("Zhengyu Jing")
install()
use_testthat()
use_test("clean the ngs data")
use_test("clean_the_ngs_data")
test()
use_package("tidyverse")
use_package("dplyr")
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
renv::snapshot(confirm = FALSE)
renv::restore("devtools")
renv::snapshot(confirm = FALSE)
library("devtools")
library("tidyverse")
install.packages("ggplot2")
install.packages("magrittr")
#install.packages("RColorBrewer")
#install.packages("ggrepel")
#install.packages("gghalves")
install.packages("tidyverse")
install.packages("reshape2")
install.packages("ggsci")
install.packages("xlsx")
install.packages("yyplot")
#install.packages("ggbreak")
install.packages("tidyr")
#install.packages("ggseqlogo")
install.packages("extrafont")
#install.packages("sangerseqR")
install.packages("profvis")
install.packages("devtools")
#在函数加完包所需结构之后
devtools::document()
#在函数加完包所需结构之后
devtools::document()
devtools::build_readme()
usethis::use_readme_rmd()
#在函数加完包所需结构之后
devtools::document()
#在函数加完包所需结构之后
devtools::document()
library(MARC)
#' Title
#'
#' @param data_for_analysis
#' @param mouse_index_list
#' @param strain
#'
#' @return
#' @export
#'
#' @examples
get_unique_num_table <-
function(data_for_analysis, mouse_index_list, strain){
unique_num_output <- data.frame(exp_index = 0, con_index = 0, group = 0)[0,]
for(mouse in mouse_index_list){
single_mouse_data <-
data_for_analysis %>%
filter(mouse_index == mouse, mouse_strain == strain, !is.na(median_reads)) %>%
select(sample, mouse_index, unique_num) %>%
arrange(sample)
find_sample_by_regex(single_mouse_data, "(?i)cd4.*(?<!c)effector", "(?i)cd4.*naive",
"cd4_effector-naive", limit =  "(?i)spleen")
#T细胞肿瘤相关--------------------------------------------------------------------------------------------
#肿瘤中cd4 pd1阳性与阴性比较
unique_num_output <-
rbind(unique_num_output,
find_sample_by_regex(single_mouse_data, "(?i)cd4.*pd-?1_(p|hi)", "(?i)cd4.*pd-?1_(n|lo)",
"cd4_pd-1P-N", limit = "(?i)tumor"))
#肿瘤中cd8 pd1阳性与阴性比较
unique_num_output <-
rbind(unique_num_output,
find_sample_by_regex(single_mouse_data, "(?i)cd8.*pd-?1_(p|hi)", "(?i)cd8.*pd-?1_(n|lo)",
"cd8_pd-1P-N", limit =  "(?i)tumor"))
#肿瘤中cd4 pd1阳性与外周naive比较
unique_num_output <-
rbind(unique_num_output,
find_sample_by_regex(single_mouse_data, "(?i)cd4.*pd-?1_(p|hi)", "(?i)cd4.*naive",
"cd4_pd-1P-naive", limit =  "(?i)tumor"))
#肿瘤中cd8 pd1阳性与外周naive比较
unique_num_output <-
rbind(unique_num_output,
find_sample_by_regex(single_mouse_data, "(?i)cd8.*pd-?1_(p|hi)", "(?i)cd8.*naive",
"cd8_pd-1P-naive", limit =  "(?i)tumor"))
#肿瘤中但并未细分pd1的情况---------------------------------------------------------------------------
#肿瘤中cd4阳性与外周naive比较
unique_num_output <-
rbind(unique_num_output,
find_sample_by_regex(single_mouse_data, "(?i)cd4.*(?<!(effector|CM))$",
"(?i)cd4.*naive(?<!tumor)$",
"cd4_tumor-naive", except = "(?i)pd-?1"))
#肿瘤中cd8阳性与外周naive比较
unique_num_output <-
rbind(unique_num_output,
find_sample_by_regex(single_mouse_data, "(?i)cd8.*(?<!(effector|CM))$",
"(?i)cd8.*naive(?<!tumor)$",
"cd8_tumor-naive", except = "(?i)pd-?1"))
#T细胞外周相关---------------------------------------------------------------------------------------
#外周cd4 effector与naive比较
unique_num_output <-
rbind(unique_num_output,
find_sample_by_regex(single_mouse_data, "(?i)cd4.*(?<!c)effector", "(?i)cd4.*naive",
"cd4_effector-naive", limit =  "(?i)spleen"))
#外周cd8 effector与naive比较
unique_num_output <-
rbind(unique_num_output,
find_sample_by_regex(single_mouse_data, "(?i)cd8.*(?<!c)effector", "(?i)cd8.*naive",
"cd8_effector-naive", limit =  "(?i)spleen"))
#外周cd8 CM与naive比较
unique_num_output <-
rbind(unique_num_output,
find_sample_by_regex(single_mouse_data, "(?i)cd8.*(CM|central)", "(?i)cd8.*naive",
"cd8_CM-naive", limit =  "(?i)spleen"))
#肿瘤中巨噬细胞相关---------------------------------------------------------------------------------------
#tnf高表达与低表达之间比较
unique_num_output <-
rbind(unique_num_output,
find_sample_by_regex(single_mouse_data, "(?i)tnf_(p|hi).*(?<!(spleen))$", "(?i)tnf_(n|lo)",
"TNF_P-N", limit = "(?i)(F4/80_P|cd11b_P)"))
#INOS高表达与低表达之间比较
unique_num_output <-
rbind(unique_num_output,
find_sample_by_regex(single_mouse_data, "(?i)inos_(p|hi).*(?<!(spleen))$", "(?i)inos_(n|lo)",
"INOS_P-N", limit = "(?i)(F4/80_P|cd11b_P)"))
#arg高表达与低表达之间比较
unique_num_output <-
rbind(unique_num_output,
find_sample_by_regex(single_mouse_data, "(?i)arg1?_(p|hi).*(?<!(spleen))$", "(?i)arg1?_(n|lo)",
"ARG1_P-N", limit = "(?i)(F4/80_P|cd11b_P)"))
#tgf高表达与低表达之间比较
unique_num_output <-
rbind(unique_num_output,
find_sample_by_regex(single_mouse_data, "(?i)tgf_(p|hi).*(?<!(spleen))$", "(?i)tgf_(n|lo)",
"TGFβ1_P-N", limit = "(?i)(F4/80_P|cd11b_P)"))
#tnf高表达与arg1高表达之间比较
unique_num_output <-
rbind(unique_num_output,
find_sample_by_regex(single_mouse_data, "(?i)tnf_(p|hi).*(?<!(spleen))$", "(?i)arg1?_(p|hi)",
"TNF_P-ARG1_P", limit = "(?i)(F4/80_P|cd11b_P)"))
#Nk细胞-----------------------------------------------------------------------------------------------
#cd107a高表达与低表达之间比较
unique_num_output <-
rbind(unique_num_output,
find_sample_by_regex(single_mouse_data, "(?i)cd107a_hi", "(?i)cd107a_lo",
"cd107a_P-N"))
}
unique_num_output <-
unique_num_output %>%
filter(!is.na(exp_index), !is.na(con_index)) %>%
arrange(group)
return(unique_num_output)
}
#在函数加完包所需结构之后
devtools::document()
library(MARC)
